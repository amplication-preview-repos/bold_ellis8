/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UniformIssueService } from "../uniformIssue.service";
import { UniformIssueCreateInput } from "./UniformIssueCreateInput";
import { UniformIssue } from "./UniformIssue";
import { UniformIssueFindManyArgs } from "./UniformIssueFindManyArgs";
import { UniformIssueWhereUniqueInput } from "./UniformIssueWhereUniqueInput";
import { UniformIssueUpdateInput } from "./UniformIssueUpdateInput";

export class UniformIssueControllerBase {
  constructor(protected readonly service: UniformIssueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UniformIssue })
  async createUniformIssue(
    @common.Body() data: UniformIssueCreateInput
  ): Promise<UniformIssue> {
    return await this.service.createUniformIssue({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        reportedBy: true,
        assignedTo: true,
        priority: true,
        description: true,
        uniformId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UniformIssue] })
  @ApiNestedQuery(UniformIssueFindManyArgs)
  async uniformIssues(@common.Req() request: Request): Promise<UniformIssue[]> {
    const args = plainToClass(UniformIssueFindManyArgs, request.query);
    return this.service.uniformIssues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        reportedBy: true,
        assignedTo: true,
        priority: true,
        description: true,
        uniformId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UniformIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uniformIssue(
    @common.Param() params: UniformIssueWhereUniqueInput
  ): Promise<UniformIssue | null> {
    const result = await this.service.uniformIssue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        reportedBy: true,
        assignedTo: true,
        priority: true,
        description: true,
        uniformId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UniformIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUniformIssue(
    @common.Param() params: UniformIssueWhereUniqueInput,
    @common.Body() data: UniformIssueUpdateInput
  ): Promise<UniformIssue | null> {
    try {
      return await this.service.updateUniformIssue({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
          reportedBy: true,
          assignedTo: true,
          priority: true,
          description: true,
          uniformId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UniformIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUniformIssue(
    @common.Param() params: UniformIssueWhereUniqueInput
  ): Promise<UniformIssue | null> {
    try {
      return await this.service.deleteUniformIssue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
          reportedBy: true,
          assignedTo: true,
          priority: true,
          description: true,
          uniformId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
