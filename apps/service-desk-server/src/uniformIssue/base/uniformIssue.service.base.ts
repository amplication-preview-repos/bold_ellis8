/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UniformIssue as PrismaUniformIssue } from "@prisma/client";

export class UniformIssueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UniformIssueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.uniformIssue.count(args);
  }

  async uniformIssues(
    args: Prisma.UniformIssueFindManyArgs
  ): Promise<PrismaUniformIssue[]> {
    return this.prisma.uniformIssue.findMany(args);
  }
  async uniformIssue(
    args: Prisma.UniformIssueFindUniqueArgs
  ): Promise<PrismaUniformIssue | null> {
    return this.prisma.uniformIssue.findUnique(args);
  }
  async createUniformIssue(
    args: Prisma.UniformIssueCreateArgs
  ): Promise<PrismaUniformIssue> {
    return this.prisma.uniformIssue.create(args);
  }
  async updateUniformIssue(
    args: Prisma.UniformIssueUpdateArgs
  ): Promise<PrismaUniformIssue> {
    return this.prisma.uniformIssue.update(args);
  }
  async deleteUniformIssue(
    args: Prisma.UniformIssueDeleteArgs
  ): Promise<PrismaUniformIssue> {
    return this.prisma.uniformIssue.delete(args);
  }
}
