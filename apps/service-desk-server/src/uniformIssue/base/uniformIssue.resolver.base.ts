/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UniformIssue } from "./UniformIssue";
import { UniformIssueCountArgs } from "./UniformIssueCountArgs";
import { UniformIssueFindManyArgs } from "./UniformIssueFindManyArgs";
import { UniformIssueFindUniqueArgs } from "./UniformIssueFindUniqueArgs";
import { CreateUniformIssueArgs } from "./CreateUniformIssueArgs";
import { UpdateUniformIssueArgs } from "./UpdateUniformIssueArgs";
import { DeleteUniformIssueArgs } from "./DeleteUniformIssueArgs";
import { UniformIssueService } from "../uniformIssue.service";
@graphql.Resolver(() => UniformIssue)
export class UniformIssueResolverBase {
  constructor(protected readonly service: UniformIssueService) {}

  async _uniformIssuesMeta(
    @graphql.Args() args: UniformIssueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UniformIssue])
  async uniformIssues(
    @graphql.Args() args: UniformIssueFindManyArgs
  ): Promise<UniformIssue[]> {
    return this.service.uniformIssues(args);
  }

  @graphql.Query(() => UniformIssue, { nullable: true })
  async uniformIssue(
    @graphql.Args() args: UniformIssueFindUniqueArgs
  ): Promise<UniformIssue | null> {
    const result = await this.service.uniformIssue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UniformIssue)
  async createUniformIssue(
    @graphql.Args() args: CreateUniformIssueArgs
  ): Promise<UniformIssue> {
    return await this.service.createUniformIssue({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UniformIssue)
  async updateUniformIssue(
    @graphql.Args() args: UpdateUniformIssueArgs
  ): Promise<UniformIssue | null> {
    try {
      return await this.service.updateUniformIssue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UniformIssue)
  async deleteUniformIssue(
    @graphql.Args() args: DeleteUniformIssueArgs
  ): Promise<UniformIssue | null> {
    try {
      return await this.service.deleteUniformIssue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
