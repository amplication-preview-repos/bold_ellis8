/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, OtherIssue as PrismaOtherIssue } from "@prisma/client";

export class OtherIssueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OtherIssueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.otherIssue.count(args);
  }

  async otherIssues(
    args: Prisma.OtherIssueFindManyArgs
  ): Promise<PrismaOtherIssue[]> {
    return this.prisma.otherIssue.findMany(args);
  }
  async otherIssue(
    args: Prisma.OtherIssueFindUniqueArgs
  ): Promise<PrismaOtherIssue | null> {
    return this.prisma.otherIssue.findUnique(args);
  }
  async createOtherIssue(
    args: Prisma.OtherIssueCreateArgs
  ): Promise<PrismaOtherIssue> {
    return this.prisma.otherIssue.create(args);
  }
  async updateOtherIssue(
    args: Prisma.OtherIssueUpdateArgs
  ): Promise<PrismaOtherIssue> {
    return this.prisma.otherIssue.update(args);
  }
  async deleteOtherIssue(
    args: Prisma.OtherIssueDeleteArgs
  ): Promise<PrismaOtherIssue> {
    return this.prisma.otherIssue.delete(args);
  }
}
