/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OtherIssue } from "./OtherIssue";
import { OtherIssueCountArgs } from "./OtherIssueCountArgs";
import { OtherIssueFindManyArgs } from "./OtherIssueFindManyArgs";
import { OtherIssueFindUniqueArgs } from "./OtherIssueFindUniqueArgs";
import { CreateOtherIssueArgs } from "./CreateOtherIssueArgs";
import { UpdateOtherIssueArgs } from "./UpdateOtherIssueArgs";
import { DeleteOtherIssueArgs } from "./DeleteOtherIssueArgs";
import { OtherIssueService } from "../otherIssue.service";
@graphql.Resolver(() => OtherIssue)
export class OtherIssueResolverBase {
  constructor(protected readonly service: OtherIssueService) {}

  async _otherIssuesMeta(
    @graphql.Args() args: OtherIssueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OtherIssue])
  async otherIssues(
    @graphql.Args() args: OtherIssueFindManyArgs
  ): Promise<OtherIssue[]> {
    return this.service.otherIssues(args);
  }

  @graphql.Query(() => OtherIssue, { nullable: true })
  async otherIssue(
    @graphql.Args() args: OtherIssueFindUniqueArgs
  ): Promise<OtherIssue | null> {
    const result = await this.service.otherIssue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OtherIssue)
  async createOtherIssue(
    @graphql.Args() args: CreateOtherIssueArgs
  ): Promise<OtherIssue> {
    return await this.service.createOtherIssue({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OtherIssue)
  async updateOtherIssue(
    @graphql.Args() args: UpdateOtherIssueArgs
  ): Promise<OtherIssue | null> {
    try {
      return await this.service.updateOtherIssue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OtherIssue)
  async deleteOtherIssue(
    @graphql.Args() args: DeleteOtherIssueArgs
  ): Promise<OtherIssue | null> {
    try {
      return await this.service.deleteOtherIssue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
