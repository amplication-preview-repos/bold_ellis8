/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryScheduleIssueService } from "../deliveryScheduleIssue.service";
import { DeliveryScheduleIssueCreateInput } from "./DeliveryScheduleIssueCreateInput";
import { DeliveryScheduleIssue } from "./DeliveryScheduleIssue";
import { DeliveryScheduleIssueFindManyArgs } from "./DeliveryScheduleIssueFindManyArgs";
import { DeliveryScheduleIssueWhereUniqueInput } from "./DeliveryScheduleIssueWhereUniqueInput";
import { DeliveryScheduleIssueUpdateInput } from "./DeliveryScheduleIssueUpdateInput";

export class DeliveryScheduleIssueControllerBase {
  constructor(protected readonly service: DeliveryScheduleIssueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryScheduleIssue })
  async createDeliveryScheduleIssue(
    @common.Body() data: DeliveryScheduleIssueCreateInput
  ): Promise<DeliveryScheduleIssue> {
    return await this.service.createDeliveryScheduleIssue({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deliveryId: true,
        priority: true,
        description: true,
        reportedBy: true,
        status: true,
        assignedTo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryScheduleIssue] })
  @ApiNestedQuery(DeliveryScheduleIssueFindManyArgs)
  async deliveryScheduleIssues(
    @common.Req() request: Request
  ): Promise<DeliveryScheduleIssue[]> {
    const args = plainToClass(DeliveryScheduleIssueFindManyArgs, request.query);
    return this.service.deliveryScheduleIssues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deliveryId: true,
        priority: true,
        description: true,
        reportedBy: true,
        status: true,
        assignedTo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryScheduleIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryScheduleIssue(
    @common.Param() params: DeliveryScheduleIssueWhereUniqueInput
  ): Promise<DeliveryScheduleIssue | null> {
    const result = await this.service.deliveryScheduleIssue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        deliveryId: true,
        priority: true,
        description: true,
        reportedBy: true,
        status: true,
        assignedTo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryScheduleIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryScheduleIssue(
    @common.Param() params: DeliveryScheduleIssueWhereUniqueInput,
    @common.Body() data: DeliveryScheduleIssueUpdateInput
  ): Promise<DeliveryScheduleIssue | null> {
    try {
      return await this.service.updateDeliveryScheduleIssue({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deliveryId: true,
          priority: true,
          description: true,
          reportedBy: true,
          status: true,
          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryScheduleIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryScheduleIssue(
    @common.Param() params: DeliveryScheduleIssueWhereUniqueInput
  ): Promise<DeliveryScheduleIssue | null> {
    try {
      return await this.service.deleteDeliveryScheduleIssue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          deliveryId: true,
          priority: true,
          description: true,
          reportedBy: true,
          status: true,
          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
