/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryScheduleIssue } from "./DeliveryScheduleIssue";
import { DeliveryScheduleIssueCountArgs } from "./DeliveryScheduleIssueCountArgs";
import { DeliveryScheduleIssueFindManyArgs } from "./DeliveryScheduleIssueFindManyArgs";
import { DeliveryScheduleIssueFindUniqueArgs } from "./DeliveryScheduleIssueFindUniqueArgs";
import { CreateDeliveryScheduleIssueArgs } from "./CreateDeliveryScheduleIssueArgs";
import { UpdateDeliveryScheduleIssueArgs } from "./UpdateDeliveryScheduleIssueArgs";
import { DeleteDeliveryScheduleIssueArgs } from "./DeleteDeliveryScheduleIssueArgs";
import { DeliveryScheduleIssueService } from "../deliveryScheduleIssue.service";
@graphql.Resolver(() => DeliveryScheduleIssue)
export class DeliveryScheduleIssueResolverBase {
  constructor(protected readonly service: DeliveryScheduleIssueService) {}

  async _deliveryScheduleIssuesMeta(
    @graphql.Args() args: DeliveryScheduleIssueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryScheduleIssue])
  async deliveryScheduleIssues(
    @graphql.Args() args: DeliveryScheduleIssueFindManyArgs
  ): Promise<DeliveryScheduleIssue[]> {
    return this.service.deliveryScheduleIssues(args);
  }

  @graphql.Query(() => DeliveryScheduleIssue, { nullable: true })
  async deliveryScheduleIssue(
    @graphql.Args() args: DeliveryScheduleIssueFindUniqueArgs
  ): Promise<DeliveryScheduleIssue | null> {
    const result = await this.service.deliveryScheduleIssue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryScheduleIssue)
  async createDeliveryScheduleIssue(
    @graphql.Args() args: CreateDeliveryScheduleIssueArgs
  ): Promise<DeliveryScheduleIssue> {
    return await this.service.createDeliveryScheduleIssue({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeliveryScheduleIssue)
  async updateDeliveryScheduleIssue(
    @graphql.Args() args: UpdateDeliveryScheduleIssueArgs
  ): Promise<DeliveryScheduleIssue | null> {
    try {
      return await this.service.updateDeliveryScheduleIssue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryScheduleIssue)
  async deleteDeliveryScheduleIssue(
    @graphql.Args() args: DeleteDeliveryScheduleIssueArgs
  ): Promise<DeliveryScheduleIssue | null> {
    try {
      return await this.service.deleteDeliveryScheduleIssue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
