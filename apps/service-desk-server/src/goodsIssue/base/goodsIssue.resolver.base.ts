/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GoodsIssue } from "./GoodsIssue";
import { GoodsIssueCountArgs } from "./GoodsIssueCountArgs";
import { GoodsIssueFindManyArgs } from "./GoodsIssueFindManyArgs";
import { GoodsIssueFindUniqueArgs } from "./GoodsIssueFindUniqueArgs";
import { CreateGoodsIssueArgs } from "./CreateGoodsIssueArgs";
import { UpdateGoodsIssueArgs } from "./UpdateGoodsIssueArgs";
import { DeleteGoodsIssueArgs } from "./DeleteGoodsIssueArgs";
import { GoodsIssueService } from "../goodsIssue.service";
@graphql.Resolver(() => GoodsIssue)
export class GoodsIssueResolverBase {
  constructor(protected readonly service: GoodsIssueService) {}

  async _goodsIssuesMeta(
    @graphql.Args() args: GoodsIssueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GoodsIssue])
  async goodsIssues(
    @graphql.Args() args: GoodsIssueFindManyArgs
  ): Promise<GoodsIssue[]> {
    return this.service.goodsIssues(args);
  }

  @graphql.Query(() => GoodsIssue, { nullable: true })
  async goodsIssue(
    @graphql.Args() args: GoodsIssueFindUniqueArgs
  ): Promise<GoodsIssue | null> {
    const result = await this.service.goodsIssue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GoodsIssue)
  async createGoodsIssue(
    @graphql.Args() args: CreateGoodsIssueArgs
  ): Promise<GoodsIssue> {
    return await this.service.createGoodsIssue({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GoodsIssue)
  async updateGoodsIssue(
    @graphql.Args() args: UpdateGoodsIssueArgs
  ): Promise<GoodsIssue | null> {
    try {
      return await this.service.updateGoodsIssue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GoodsIssue)
  async deleteGoodsIssue(
    @graphql.Args() args: DeleteGoodsIssueArgs
  ): Promise<GoodsIssue | null> {
    try {
      return await this.service.deleteGoodsIssue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
