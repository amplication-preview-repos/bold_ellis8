/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GoodsIssueService } from "../goodsIssue.service";
import { GoodsIssueCreateInput } from "./GoodsIssueCreateInput";
import { GoodsIssue } from "./GoodsIssue";
import { GoodsIssueFindManyArgs } from "./GoodsIssueFindManyArgs";
import { GoodsIssueWhereUniqueInput } from "./GoodsIssueWhereUniqueInput";
import { GoodsIssueUpdateInput } from "./GoodsIssueUpdateInput";

export class GoodsIssueControllerBase {
  constructor(protected readonly service: GoodsIssueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GoodsIssue })
  async createGoodsIssue(
    @common.Body() data: GoodsIssueCreateInput
  ): Promise<GoodsIssue> {
    return await this.service.createGoodsIssue({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        goodsId: true,
        priority: true,
        status: true,
        reportedBy: true,
        assignedTo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GoodsIssue] })
  @ApiNestedQuery(GoodsIssueFindManyArgs)
  async goodsIssues(@common.Req() request: Request): Promise<GoodsIssue[]> {
    const args = plainToClass(GoodsIssueFindManyArgs, request.query);
    return this.service.goodsIssues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        goodsId: true,
        priority: true,
        status: true,
        reportedBy: true,
        assignedTo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GoodsIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async goodsIssue(
    @common.Param() params: GoodsIssueWhereUniqueInput
  ): Promise<GoodsIssue | null> {
    const result = await this.service.goodsIssue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        goodsId: true,
        priority: true,
        status: true,
        reportedBy: true,
        assignedTo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GoodsIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGoodsIssue(
    @common.Param() params: GoodsIssueWhereUniqueInput,
    @common.Body() data: GoodsIssueUpdateInput
  ): Promise<GoodsIssue | null> {
    try {
      return await this.service.updateGoodsIssue({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          goodsId: true,
          priority: true,
          status: true,
          reportedBy: true,
          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GoodsIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGoodsIssue(
    @common.Param() params: GoodsIssueWhereUniqueInput
  ): Promise<GoodsIssue | null> {
    try {
      return await this.service.deleteGoodsIssue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          goodsId: true,
          priority: true,
          status: true,
          reportedBy: true,
          assignedTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
