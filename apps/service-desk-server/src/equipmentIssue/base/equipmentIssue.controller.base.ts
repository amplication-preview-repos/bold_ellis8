/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EquipmentIssueService } from "../equipmentIssue.service";
import { EquipmentIssueCreateInput } from "./EquipmentIssueCreateInput";
import { EquipmentIssue } from "./EquipmentIssue";
import { EquipmentIssueFindManyArgs } from "./EquipmentIssueFindManyArgs";
import { EquipmentIssueWhereUniqueInput } from "./EquipmentIssueWhereUniqueInput";
import { EquipmentIssueUpdateInput } from "./EquipmentIssueUpdateInput";

export class EquipmentIssueControllerBase {
  constructor(protected readonly service: EquipmentIssueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EquipmentIssue })
  async createEquipmentIssue(
    @common.Body() data: EquipmentIssueCreateInput
  ): Promise<EquipmentIssue> {
    return await this.service.createEquipmentIssue({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        reportedBy: true,
        assignedTo: true,
        equipmentId: true,
        priority: true,
        status: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EquipmentIssue] })
  @ApiNestedQuery(EquipmentIssueFindManyArgs)
  async equipmentIssues(
    @common.Req() request: Request
  ): Promise<EquipmentIssue[]> {
    const args = plainToClass(EquipmentIssueFindManyArgs, request.query);
    return this.service.equipmentIssues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        reportedBy: true,
        assignedTo: true,
        equipmentId: true,
        priority: true,
        status: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EquipmentIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async equipmentIssue(
    @common.Param() params: EquipmentIssueWhereUniqueInput
  ): Promise<EquipmentIssue | null> {
    const result = await this.service.equipmentIssue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        reportedBy: true,
        assignedTo: true,
        equipmentId: true,
        priority: true,
        status: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EquipmentIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEquipmentIssue(
    @common.Param() params: EquipmentIssueWhereUniqueInput,
    @common.Body() data: EquipmentIssueUpdateInput
  ): Promise<EquipmentIssue | null> {
    try {
      return await this.service.updateEquipmentIssue({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          reportedBy: true,
          assignedTo: true,
          equipmentId: true,
          priority: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EquipmentIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEquipmentIssue(
    @common.Param() params: EquipmentIssueWhereUniqueInput
  ): Promise<EquipmentIssue | null> {
    try {
      return await this.service.deleteEquipmentIssue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          reportedBy: true,
          assignedTo: true,
          equipmentId: true,
          priority: true,
          status: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
