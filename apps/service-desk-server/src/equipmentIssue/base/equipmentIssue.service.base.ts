/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EquipmentIssue as PrismaEquipmentIssue } from "@prisma/client";

export class EquipmentIssueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EquipmentIssueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.equipmentIssue.count(args);
  }

  async equipmentIssues(
    args: Prisma.EquipmentIssueFindManyArgs
  ): Promise<PrismaEquipmentIssue[]> {
    return this.prisma.equipmentIssue.findMany(args);
  }
  async equipmentIssue(
    args: Prisma.EquipmentIssueFindUniqueArgs
  ): Promise<PrismaEquipmentIssue | null> {
    return this.prisma.equipmentIssue.findUnique(args);
  }
  async createEquipmentIssue(
    args: Prisma.EquipmentIssueCreateArgs
  ): Promise<PrismaEquipmentIssue> {
    return this.prisma.equipmentIssue.create(args);
  }
  async updateEquipmentIssue(
    args: Prisma.EquipmentIssueUpdateArgs
  ): Promise<PrismaEquipmentIssue> {
    return this.prisma.equipmentIssue.update(args);
  }
  async deleteEquipmentIssue(
    args: Prisma.EquipmentIssueDeleteArgs
  ): Promise<PrismaEquipmentIssue> {
    return this.prisma.equipmentIssue.delete(args);
  }
}
