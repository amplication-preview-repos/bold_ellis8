/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EquipmentIssue } from "./EquipmentIssue";
import { EquipmentIssueCountArgs } from "./EquipmentIssueCountArgs";
import { EquipmentIssueFindManyArgs } from "./EquipmentIssueFindManyArgs";
import { EquipmentIssueFindUniqueArgs } from "./EquipmentIssueFindUniqueArgs";
import { CreateEquipmentIssueArgs } from "./CreateEquipmentIssueArgs";
import { UpdateEquipmentIssueArgs } from "./UpdateEquipmentIssueArgs";
import { DeleteEquipmentIssueArgs } from "./DeleteEquipmentIssueArgs";
import { EquipmentIssueService } from "../equipmentIssue.service";
@graphql.Resolver(() => EquipmentIssue)
export class EquipmentIssueResolverBase {
  constructor(protected readonly service: EquipmentIssueService) {}

  async _equipmentIssuesMeta(
    @graphql.Args() args: EquipmentIssueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EquipmentIssue])
  async equipmentIssues(
    @graphql.Args() args: EquipmentIssueFindManyArgs
  ): Promise<EquipmentIssue[]> {
    return this.service.equipmentIssues(args);
  }

  @graphql.Query(() => EquipmentIssue, { nullable: true })
  async equipmentIssue(
    @graphql.Args() args: EquipmentIssueFindUniqueArgs
  ): Promise<EquipmentIssue | null> {
    const result = await this.service.equipmentIssue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EquipmentIssue)
  async createEquipmentIssue(
    @graphql.Args() args: CreateEquipmentIssueArgs
  ): Promise<EquipmentIssue> {
    return await this.service.createEquipmentIssue({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EquipmentIssue)
  async updateEquipmentIssue(
    @graphql.Args() args: UpdateEquipmentIssueArgs
  ): Promise<EquipmentIssue | null> {
    try {
      return await this.service.updateEquipmentIssue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EquipmentIssue)
  async deleteEquipmentIssue(
    @graphql.Args() args: DeleteEquipmentIssueArgs
  ): Promise<EquipmentIssue | null> {
    try {
      return await this.service.deleteEquipmentIssue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
